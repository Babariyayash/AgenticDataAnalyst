import streamlit as st
import pandas as pd
import os
import json
from langchain_core.messages import HumanMessage, AIMessage
from agent.backend import PythonChatbot, InputData
import pickle

# Ensure required directories exist
if not os.path.exists("uploads"):
    os.makedirs("uploads")
if not os.path.exists("images/plotly_figures/pickle"):
    os.makedirs("images/plotly_figures/pickle")

st.title("Data Analysis Dashboard")

# Load data dictionary
data_dictionary_path = "data_dictionary.json"
if not os.path.exists(data_dictionary_path):
    with open(data_dictionary_path, 'w') as f:
        json.dump({}, f)

with open(data_dictionary_path, 'r') as f:
    data_dictionary = json.load(f)

# # Tabs for different functionalities
# tab1, tab2, tab3 = st.tabs(["Data Management", "Chat Interface", "Debug"])

# Tabs for different functionalities
tab1, tab2 = st.tabs(["Data Management", "Chat Interface"])

# Tab 1: Data Management
with tab1:
    st.subheader("Upload and Manage Datasets")

    # File upload section
    uploaded_files = st.file_uploader(
        "Upload CSV files", type="csv", accept_multiple_files=True
    )

    if uploaded_files:
        # Save uploaded files
        for file in uploaded_files:
            file_path = os.path.join("uploads", file.name)
            with open(file_path, "wb") as f:
                f.write(file.getbuffer())
        st.success("Files uploaded successfully!")

    # Get list of available CSV files
    available_files = [f for f in os.listdir("uploads") if f.endswith('.csv')]

    if available_files:
        # File selection
        selected_files = st.multiselect(
            "Select files to analyze",
            available_files,
            key="selected_files"
        )

        if selected_files:
            # Display datasets with autogenerated descriptions
            file_tabs = st.tabs(selected_files)
            for tab, filename in zip(file_tabs, selected_files):
                with tab:
                    try:
                        file_path = os.path.join("uploads", filename)
                        df = pd.read_csv(file_path)

                        # Display dataset preview
                        st.write(f"Preview of {filename}:")
                        st.dataframe(df.head())

                        # Generate basic dataset information
                        num_rows = df.shape[0]
                        num_cols = df.shape[1]
                        columns = df.columns.tolist()


                        # Display autogenerated description
                        st.subheader("Dataset Information")
                        st.write(f"**Number of Rows:** {num_rows}")
                        st.write(f"**Number of Columns:** {num_cols}")

                    except Exception as e:
                        st.error(f"Error loading {filename}: {e}")
    else:
        st.info("No datasets uploaded. Please upload some files.")

# Tab 2: Chat Interface
with tab2:
    st.subheader("AI Analysis Chat Interface")

    def on_submit_user_query():
        user_query = st.session_state["user_input"]
        if "selected_files" in st.session_state and st.session_state["selected_files"]:
            input_data_list = [
                InputData(
                    variable_name=f"{file.split('.')[0]}",
                    data_path=os.path.join("uploads", file),
                    data_description=data_dictionary.get(file, {}).get("description", "")
                )
                for file in st.session_state["selected_files"]
            ]
            try:
                response = st.session_state["chatbot"].user_sent_message(user_query, input_data_list)
                st.session_state["chat_responses"].append((user_query, response))
            except Exception as e:
                st.error(f"An error occurred: {e}")


    if "selected_files" in st.session_state and st.session_state["selected_files"]:
        if "chatbot" not in st.session_state:
            st.session_state["chatbot"] = PythonChatbot()
        if "chat_responses" not in st.session_state:
            st.session_state["chat_responses"] = []

        chat_container = st.container(height=500)

        with chat_container:
            # Display chat history with associated images
            for msg_index, msg in enumerate(st.session_state.chatbot.chat_history):
                msg_col, img_col = st.columns([2, 1])

                with msg_col:
                    if isinstance(msg, HumanMessage):
                        st.chat_message("You").markdown(msg.content)
                    elif isinstance(msg, AIMessage):
                        with st.chat_message("AI"):
                            st.markdown(msg.content)

                    if isinstance(msg, AIMessage) and msg_index in st.session_state.chatbot.output_image_paths:
                        image_paths = st.session_state.chatbot.output_image_paths[msg_index]
                        for idx, image_path in enumerate(image_paths):
                            with open(os.path.join("images/plotly_figures/pickle", image_path), "rb") as f:
                                fig = pickle.load(f)
                            st.plotly_chart(fig, use_container_width=True, key=f"plotly_chart_{msg_index}_{idx}")

            # # Display chat history
            # for user_msg, ai_response in st.session_state["chat_responses"]:
            #     st.markdown(f"**You:** {user_msg}")
            #     if isinstance(ai_response, str):
            #         st.markdown(f"**AI:** {ai_response}")
            #     elif isinstance(ai_response, dict) and "visualization" in ai_response:
            #         st.plotly_chart(ai_response["visualization"], use_container_width=True)

        # Chat input
        st.text_input("Ask your AI Agent", key="user_input", on_change=on_submit_user_query)
    else:
        st.info("Please select files to analyze in the Data Management tab.")

# # Tab 3: Debug Information
# with tab3:
#     st.subheader("Debug Information")
#     if "chatbot" in st.session_state:
#         for i, output in enumerate(st.session_state["chatbot"].intermediate_outputs):
#             with st.expander(f"Step {i + 1}"):
#                 if "thought" in output:
#                     st.markdown("### Thought Process")
#                     st.markdown(output["thought"])
#                 if "code" in output:
#                     st.markdown("### Code")
#                     st.code(output["code"], language="python")
#                 if "output" in output:
#                     st.markdown("### Output")
#                     st.text(output["output"])



